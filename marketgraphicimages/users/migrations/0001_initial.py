# Generated by Django 4.2 on 2023-08-14 07:32

import core.validators
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'User with such a username already exists'}, help_text='Enter the username. Maximum of 30 characters.Use only English letters, numbers and symbols @/./+/-/_', max_length=30, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator(), django.core.validators.MinLengthValidator(limit_value=3)], verbose_name='Username')),
                ('email', models.EmailField(error_messages={'unique': 'User with such an email already exists'}, help_text='Enter the email.', max_length=254, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='Email')),
                ('first_name', models.CharField(blank=True, help_text='Enter your name', max_length=53, validators=[django.contrib.auth.validators.ASCIIUsernameValidator(), django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='Name')),
                ('last_name', models.CharField(blank=True, help_text='Enter your surname', max_length=100, validators=[django.contrib.auth.validators.ASCIIUsernameValidator(), django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='Surname')),
                ('birthdate', models.DateField(help_text='Enter your date of birth', null=True, validators=[core.validators.date_is_past], verbose_name='Date of birth')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Enter your Number phone', max_length=128, region=None, verbose_name='Number phone')),
                ('author', models.BooleanField(default=False, verbose_name='Author')),
                ('confirmation_code', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(999999)], verbose_name='Confirmation code')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('email',),
            },
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(help_text='Выберите автора из списка', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('user', models.ForeignKey(help_text='Выберите из списка пользователя', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='unique_subscription'),
        ),
    ]
